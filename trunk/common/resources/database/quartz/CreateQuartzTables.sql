ALTER TABLE DAM_QRTZ_JOB_DETAILS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_JOB_DETAILS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_JOB_DETAILS
(
  JOB_NAME           VARCHAR2(200 BYTE)         NOT NULL,
  JOB_GROUP          VARCHAR2(200 BYTE)         NOT NULL,
  DESCRIPTION        VARCHAR2(250 BYTE),
  JOB_CLASS_NAME     VARCHAR2(250 BYTE)         NOT NULL,
  IS_DURABLE         VARCHAR2(1 BYTE)           NOT NULL,
  IS_VOLATILE        VARCHAR2(1 BYTE)           NOT NULL,
  IS_STATEFUL        VARCHAR2(1 BYTE)           NOT NULL,
  REQUESTS_RECOVERY  VARCHAR2(1 BYTE)           NOT NULL,
  JOB_DATA           BLOB
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_JOB_LISTENERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_JOB_LISTENERS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_JOB_LISTENERS
(
  JOB_NAME      VARCHAR2(200 BYTE)              NOT NULL,
  JOB_GROUP     VARCHAR2(200 BYTE)              NOT NULL,
  JOB_LISTENER  VARCHAR2(200 BYTE)              NOT NULL
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_TRIGGERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_TRIGGERS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_TRIGGERS
(
  TRIGGER_NAME    VARCHAR2(200 BYTE)            NOT NULL,
  TRIGGER_GROUP   VARCHAR2(200 BYTE)            NOT NULL,
  JOB_NAME        VARCHAR2(200 BYTE)            NOT NULL,
  JOB_GROUP       VARCHAR2(200 BYTE)            NOT NULL,
  IS_VOLATILE     VARCHAR2(1 BYTE)              NOT NULL,
  DESCRIPTION     VARCHAR2(250 BYTE),
  NEXT_FIRE_TIME  NUMBER(13),
  PREV_FIRE_TIME  NUMBER(13),
  PRIORITY        NUMBER(13),
  TRIGGER_STATE   VARCHAR2(16 BYTE)             NOT NULL,
  TRIGGER_TYPE    VARCHAR2(8 BYTE)              NOT NULL,
  START_TIME      NUMBER(13)                    NOT NULL,
  END_TIME        NUMBER(13),
  CALENDAR_NAME   VARCHAR2(200 BYTE),
  MISFIRE_INSTR   NUMBER(2),
  JOB_DATA        BLOB
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_SIMPLE_TRIGGERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_SIMPLE_TRIGGERS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_SIMPLE_TRIGGERS
(
  TRIGGER_NAME     VARCHAR2(200 BYTE)           NOT NULL,
  TRIGGER_GROUP    VARCHAR2(200 BYTE)           NOT NULL,
  REPEAT_COUNT     NUMBER(7)                    NOT NULL,
  REPEAT_INTERVAL  NUMBER(12)                   NOT NULL,
  TIMES_TRIGGERED  NUMBER(10)                   NOT NULL
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_CRON_TRIGGERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_CRON_TRIGGERS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_CRON_TRIGGERS
(
  TRIGGER_NAME     VARCHAR2(200 BYTE)           NOT NULL,
  TRIGGER_GROUP    VARCHAR2(200 BYTE)           NOT NULL,
  CRON_EXPRESSION  VARCHAR2(120 BYTE)           NOT NULL,
  TIME_ZONE_ID     VARCHAR2(80 BYTE)
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_BLOB_TRIGGERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_BLOB_TRIGGERS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_BLOB_TRIGGERS
(
  TRIGGER_NAME   VARCHAR2(200 BYTE)             NOT NULL,
  TRIGGER_GROUP  VARCHAR2(200 BYTE)             NOT NULL,
  BLOB_DATA      BLOB
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_TRIGGER_LISTENERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_TRIGGER_LISTENERS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_TRIGGER_LISTENERS
(
  TRIGGER_NAME      VARCHAR2(200 BYTE)          NOT NULL,
  TRIGGER_GROUP     VARCHAR2(200 BYTE)          NOT NULL,
  TRIGGER_LISTENER  VARCHAR2(200 BYTE)          NOT NULL
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_CALENDARS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_CALENDARS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_CALENDARS
(
  CALENDAR_NAME  VARCHAR2(200 BYTE)             NOT NULL,
  CALENDAR       BLOB                           NOT NULL
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_PAUSED_TRIGGER_GRPS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_PAUSED_TRIGGER_GRPS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_PAUSED_TRIGGER_GRPS
(
  TRIGGER_GROUP  VARCHAR2(200 BYTE)             NOT NULL
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_FIRED_TRIGGERS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_FIRED_TRIGGERS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_FIRED_TRIGGERS
(
  ENTRY_ID           VARCHAR2(95 BYTE)          NOT NULL,
  TRIGGER_NAME       VARCHAR2(200 BYTE)         NOT NULL,
  TRIGGER_GROUP      VARCHAR2(200 BYTE)         NOT NULL,
  IS_VOLATILE        VARCHAR2(1 BYTE)           NOT NULL,
  INSTANCE_NAME      VARCHAR2(200 BYTE)         NOT NULL,
  FIRED_TIME         NUMBER(13)                 NOT NULL,
  PRIORITY           NUMBER(13)                 NOT NULL,
  STATE              VARCHAR2(16 BYTE)          NOT NULL,
  JOB_NAME           VARCHAR2(200 BYTE),
  JOB_GROUP          VARCHAR2(200 BYTE),
  IS_STATEFUL        VARCHAR2(1 BYTE),
  REQUESTS_RECOVERY  VARCHAR2(1 BYTE)
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_SCHEDULER_STATE
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_SCHEDULER_STATE CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_SCHEDULER_STATE
(
  INSTANCE_NAME      VARCHAR2(200 BYTE)         NOT NULL,
  LAST_CHECKIN_TIME  NUMBER(13)                 NOT NULL,
  CHECKIN_INTERVAL   NUMBER(13)                 NOT NULL
)
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE DAM_QRTZ_LOCKS
 DROP PRIMARY KEY CASCADE;

DROP TABLE DAM_QRTZ_LOCKS CASCADE CONSTRAINTS;

CREATE TABLE DAM_QRTZ_LOCKS
(
  LOCK_NAME  VARCHAR2(40 BYTE)                  NOT NULL
)
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DAM_FT_JOB_GROUP ON DAM_QRTZ_FIRED_TRIGGERS
(JOB_GROUP);


CREATE INDEX IDX_DAM_FT_JOB_NAME ON DAM_QRTZ_FIRED_TRIGGERS
(JOB_NAME);


CREATE INDEX IDX_DAM_FT_JOB_REQ_RECOVERY ON DAM_QRTZ_FIRED_TRIGGERS
(REQUESTS_RECOVERY);


CREATE INDEX IDX_DAM_FT_JOB_STATEFUL ON DAM_QRTZ_FIRED_TRIGGERS
(IS_STATEFUL);


CREATE INDEX IDX_DAM_FT_TRIG_GROUP ON DAM_QRTZ_FIRED_TRIGGERS
(TRIGGER_GROUP);


CREATE INDEX IDX_DAM_FT_TRIG_INST_NAME ON DAM_QRTZ_FIRED_TRIGGERS
(INSTANCE_NAME);


CREATE INDEX IDX_DAM_FT_TRIG_NAME ON DAM_QRTZ_FIRED_TRIGGERS
(TRIGGER_NAME);


CREATE INDEX IDX_DAM_FT_TRIG_NM_GP ON DAM_QRTZ_FIRED_TRIGGERS
(TRIGGER_NAME, TRIGGER_GROUP);


CREATE INDEX IDX_DAM_FT_TRIG_VOLATILE ON DAM_QRTZ_FIRED_TRIGGERS
(IS_VOLATILE);


CREATE INDEX IDX_DAM_J_REQ_RECOVERY ON DAM_QRTZ_JOB_DETAILS
(REQUESTS_RECOVERY);


CREATE INDEX IDX_DAM_T_NEXT_FIRE_TIME ON DAM_QRTZ_TRIGGERS
(NEXT_FIRE_TIME);


CREATE INDEX IDX_DAM_T_NFT_ST ON DAM_QRTZ_TRIGGERS
(NEXT_FIRE_TIME, TRIGGER_STATE);


CREATE INDEX IDX_DAM_T_STATE ON DAM_QRTZ_TRIGGERS
(TRIGGER_STATE);


CREATE INDEX IDX_DAM_T_VOLATILE ON DAM_QRTZ_TRIGGERS
(IS_VOLATILE);


ALTER TABLE DAM_QRTZ_JOB_DETAILS ADD (
  PRIMARY KEY
 (JOB_NAME, JOB_GROUP));

ALTER TABLE DAM_QRTZ_JOB_LISTENERS ADD (
  PRIMARY KEY
 (JOB_NAME, JOB_GROUP, JOB_LISTENER));

ALTER TABLE DAM_QRTZ_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_SIMPLE_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_CRON_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_BLOB_TRIGGERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_TRIGGER_LISTENERS ADD (
  PRIMARY KEY
 (TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER));

ALTER TABLE DAM_QRTZ_CALENDARS ADD (
  PRIMARY KEY
 (CALENDAR_NAME));

ALTER TABLE DAM_QRTZ_PAUSED_TRIGGER_GRPS ADD (
  PRIMARY KEY
 (TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_FIRED_TRIGGERS ADD (
  PRIMARY KEY
 (ENTRY_ID));

ALTER TABLE DAM_QRTZ_SCHEDULER_STATE ADD (
  PRIMARY KEY
 (INSTANCE_NAME));

ALTER TABLE DAM_QRTZ_LOCKS ADD (
  PRIMARY KEY
 (LOCK_NAME));

ALTER TABLE DAM_QRTZ_JOB_LISTENERS ADD (
  FOREIGN KEY (JOB_NAME, JOB_GROUP) 
 REFERENCES DAM_QRTZ_JOB_DETAILS (JOB_NAME,JOB_GROUP));

ALTER TABLE DAM_QRTZ_TRIGGERS ADD (
  FOREIGN KEY (JOB_NAME, JOB_GROUP) 
 REFERENCES DAM_QRTZ_JOB_DETAILS (JOB_NAME,JOB_GROUP));

ALTER TABLE DAM_QRTZ_SIMPLE_TRIGGERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES DAM_QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_CRON_TRIGGERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES DAM_QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_BLOB_TRIGGERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES DAM_QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));

ALTER TABLE DAM_QRTZ_TRIGGER_LISTENERS ADD (
  FOREIGN KEY (TRIGGER_NAME, TRIGGER_GROUP) 
 REFERENCES DAM_QRTZ_TRIGGERS (TRIGGER_NAME,TRIGGER_GROUP));
 
 INSERT INTO dam_qrtz_locks values('TRIGGER_ACCESS');
 INSERT INTO dam_qrtz_locks values('JOB_ACCESS');
 INSERT INTO dam_qrtz_locks values('CALENDAR_ACCESS');
 INSERT INTO dam_qrtz_locks values('STATE_ACCESS');
 INSERT INTO dam_qrtz_locks values('MISFIRE_ACCESS');
commit;

-- Tables for smallqueue job scheduler
drop table small_que_calendars;
drop table small_que_fired_triggers;
drop table small_que_trigger_listeners;
drop table small_que_blob_triggers;
drop table small_que_cron_triggers;
drop table small_que_simple_triggers;
drop table small_que_triggers;
drop table small_que_job_listeners;
drop table small_que_job_details;
drop table small_que_paused_trigger_grps;
drop table small_que_locks;
drop table small_que_scheduler_state;


CREATE TABLE small_que_job_details
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE small_que_job_listeners
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES small_que_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE small_que_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES small_que_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE small_que_simple_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES small_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE small_que_cron_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES small_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE small_que_blob_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES small_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE small_que_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES small_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE small_que_calendars
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE small_que_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE small_que_fired_triggers
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE small_que_scheduler_state
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE small_que_locks
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    PRIMARY KEY (LOCK_NAME)
);
INSERT INTO small_que_locks values('TRIGGER_ACCESS');
INSERT INTO small_que_locks values('JOB_ACCESS');
INSERT INTO small_que_locks values('CALENDAR_ACCESS');
INSERT INTO small_que_locks values('STATE_ACCESS');
INSERT INTO small_que_locks values('MISFIRE_ACCESS');
commit;
create index idx_small_que_j_req_recovery on small_que_job_details(REQUESTS_RECOVERY);
create index idx_small_que_t_next_fire_time on small_que_triggers(NEXT_FIRE_TIME);
create index idx_small_que_t_state on small_que_triggers(TRIGGER_STATE);
create index idx_small_que_t_nft_st on small_que_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_small_que_t_volatile on small_que_triggers(IS_VOLATILE);
create index idx_small_que_ft_trig_name on small_que_fired_triggers(TRIGGER_NAME);
create index idx_small_que_ft_trig_group on small_que_fired_triggers(TRIGGER_GROUP);
create index idx_small_que_ft_trig_nm_gp on small_que_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
create index idx_small_que_ft_trig_volatile on small_que_fired_triggers(IS_VOLATILE);
create index idx_small_que_ft_trig_inst_nm on small_que_fired_triggers(INSTANCE_NAME);
create index idx_small_que_ft_job_name on small_que_fired_triggers(JOB_NAME);
create index idx_small_que_ft_job_group on small_que_fired_triggers(JOB_GROUP);
create index idx_small_que_ft_job_stateful on small_que_fired_triggers(IS_STATEFUL);
create index idx_small_que_ft_job_req_recov on small_que_fired_triggers(REQUESTS_RECOVERY);


-- Tables for big queue scheduler
drop table big_que_calendars;
drop table big_que_fired_triggers;
drop table big_que_trigger_listeners;
drop table big_que_blob_triggers;
drop table big_que_cron_triggers;
drop table big_que_simple_triggers;
drop table big_que_triggers;
drop table big_que_job_listeners;
drop table big_que_job_details;
drop table big_que_paused_trigger_grps;
drop table big_que_locks;
drop table big_que_scheduler_state;


CREATE TABLE big_que_job_details
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE big_que_job_listeners
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES BIG_QUE_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE big_que_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES BIG_QUE_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE big_que_simple_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES BIG_QUE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE big_que_cron_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES BIG_QUE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE big_que_blob_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES BIG_QUE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE big_que_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES BIG_QUE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE big_que_calendars
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE big_que_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE big_que_fired_triggers
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE big_que_scheduler_state
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE big_que_locks
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    PRIMARY KEY (LOCK_NAME)
);
INSERT INTO big_que_locks values('TRIGGER_ACCESS');
INSERT INTO big_que_locks values('JOB_ACCESS');
INSERT INTO big_que_locks values('CALENDAR_ACCESS');
INSERT INTO big_que_locks values('STATE_ACCESS');
INSERT INTO big_que_locks values('MISFIRE_ACCESS');
commit;
create index idx_big_que_j_req_recovery on big_que_job_details(REQUESTS_RECOVERY);
create index idx_big_que_t_next_fire_time on big_que_triggers(NEXT_FIRE_TIME);
create index idx_big_que_t_state on big_que_triggers(TRIGGER_STATE);
create index idx_big_que_t_nft_st on big_que_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_big_que_t_volatile on big_que_triggers(IS_VOLATILE);
create index idx_big_que_ft_trig_name on big_que_fired_triggers(TRIGGER_NAME);
create index idx_big_que_ft_trig_group on big_que_fired_triggers(TRIGGER_GROUP);
create index idx_big_que_ft_trig_nm_gp on big_que_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
create index idx_big_que_ft_trig_volatile on big_que_fired_triggers(IS_VOLATILE);
create index idx_big_que_ft_trig_inst_name on big_que_fired_triggers(INSTANCE_NAME);
create index idx_big_que_ft_job_name on big_que_fired_triggers(JOB_NAME);
create index idx_big_que_ft_job_group on big_que_fired_triggers(JOB_GROUP);
create index idx_big_que_ft_job_stateful on big_que_fired_triggers(IS_STATEFUL);
create index idx_big_que_ft_job_req_recov on big_que_fired_triggers(REQUESTS_RECOVERY);


-- Tables for qc live scheduler
drop table qrtz_calendars;
drop table qrtz_fired_triggers;
drop table qrtz_trigger_listeners;
drop table qrtz_blob_triggers;
drop table qrtz_cron_triggers;
drop table qrtz_simple_triggers;
drop table qrtz_triggers;
drop table qrtz_job_listeners;
drop table qrtz_job_details;
drop table qrtz_paused_trigger_grps;
drop table qrtz_locks;
drop table qrtz_scheduler_state;


CREATE TABLE qrtz_job_details
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_job_listeners
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_simple_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_cron_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_blob_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_calendars
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE qrtz_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE qrtz_fired_triggers
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE qrtz_scheduler_state
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE qrtz_locks
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    PRIMARY KEY (LOCK_NAME)
);
INSERT INTO qrtz_locks values('TRIGGER_ACCESS');
INSERT INTO qrtz_locks values('JOB_ACCESS');
INSERT INTO qrtz_locks values('CALENDAR_ACCESS');
INSERT INTO qrtz_locks values('STATE_ACCESS');
INSERT INTO qrtz_locks values('MISFIRE_ACCESS');
commit;
create index idx_qrtz_j_req_recovery on qrtz_job_details(REQUESTS_RECOVERY);
create index idx_qrtz_t_next_fire_time on qrtz_triggers(NEXT_FIRE_TIME);
create index idx_qrtz_t_state on qrtz_triggers(TRIGGER_STATE);
create index idx_qrtz_t_nft_st on qrtz_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_qrtz_t_volatile on qrtz_triggers(IS_VOLATILE);
create index idx_qrtz_ft_trig_name on qrtz_fired_triggers(TRIGGER_NAME);
create index idx_qrtz_ft_trig_group on qrtz_fired_triggers(TRIGGER_GROUP);
create index idx_qrtz_ft_trig_nm_gp on qrtz_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
create index idx_qrtz_ft_trig_volatile on qrtz_fired_triggers(IS_VOLATILE);
create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(INSTANCE_NAME);
create index idx_qrtz_ft_job_name on qrtz_fired_triggers(JOB_NAME);
create index idx_qrtz_ft_job_group on qrtz_fired_triggers(JOB_GROUP);
create index idx_qrtz_ft_job_stateful on qrtz_fired_triggers(IS_STATEFUL);
create index idx_qrtz_ft_job_req_recovery on qrtz_fired_triggers(REQUESTS_RECOVERY);

DROP TABLE qrtz_JOB_HISTORY;
CREATE TABLE QRTZ_JOB_HISTORY
(
  JOB_NAME               VARCHAR2(200 BYTE)         NOT NULL,
  JOB_GROUP              VARCHAR2(200 BYTE)         NOT NULL,
  FIRE_TIME             DATE            NOT NULL,
  STATUS             VARCHAR2(16)        NOT NULL,
  LAST_UPDATED             DATE,
  JOB_DATA               XMLTYPE,
  time_enqueued 	TIMESTAMP ,
  queue_name  	VARCHAR2(100),
  is_complete 	NUMBER(1) DEFAULT 1 NOT NULL,
  PRIMARY KEY (JOB_NAME,JOB_GROUP)
 )
XMLTYPE job_data STORE AS CLOB;

drop table L2DCACHE_calendars;
drop table L2DCACHE_fired_triggers;
drop table L2DCACHE_trigger_listeners;
drop table L2DCACHE_blob_triggers;
drop table L2DCACHE_cron_triggers;
drop table L2DCACHE_simple_triggers;
drop table L2DCACHE_triggers;
drop table L2DCACHE_job_listeners;
drop table L2DCACHE_job_details;
drop table L2DCACHE_paused_trigger_grps;
drop table L2DCACHE_locks;
drop table L2DCACHE_scheduler_state;


CREATE TABLE L2DCACHE_job_details
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE L2DCACHE_job_listeners
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES L2DCACHE_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE L2DCACHE_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES L2DCACHE_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE L2DCACHE_simple_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES L2DCACHE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE L2DCACHE_cron_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES L2DCACHE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE L2DCACHE_blob_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES L2DCACHE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE L2DCACHE_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES L2DCACHE_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE L2DCACHE_calendars
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE L2DCACHE_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE L2DCACHE_fired_triggers
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE L2DCACHE_scheduler_state
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE L2DCACHE_locks
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    PRIMARY KEY (LOCK_NAME)
);
INSERT INTO L2DCACHE_locks values('TRIGGER_ACCESS');
INSERT INTO L2DCACHE_locks values('JOB_ACCESS');
INSERT INTO L2DCACHE_locks values('CALENDAR_ACCESS');
INSERT INTO L2DCACHE_locks values('STATE_ACCESS');
INSERT INTO L2DCACHE_locks values('MISFIRE_ACCESS');
commit;
create index idx_L2DCACHE_j_req_recovery on L2DCACHE_job_details(REQUESTS_RECOVERY);
create index idx_L2DCACHE_t_next_fire_time on L2DCACHE_triggers(NEXT_FIRE_TIME);
create index idx_L2DCACHE_t_state on L2DCACHE_triggers(TRIGGER_STATE);
create index idx_L2DCACHE_t_nft_st on L2DCACHE_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_L2DCACHE_t_volatile on L2DCACHE_triggers(IS_VOLATILE);
create index idx_L2DCACHE_ft_trig_name on L2DCACHE_fired_triggers(TRIGGER_NAME);
create index idx_L2DCACHE_ft_trig_group on L2DCACHE_fired_triggers(TRIGGER_GROUP);
create index idx_L2DCACHE_ft_trig_nm_gp on L2DCACHE_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
create index idx_L2DCACHE_ft_trig_volatile on L2DCACHE_fired_triggers(IS_VOLATILE);
create index idx_L2DCACHE_ft_trig_inst_name on L2DCACHE_fired_triggers(INSTANCE_NAME);
create index idx_L2DCACHE_ft_job_name on L2DCACHE_fired_triggers(JOB_NAME);
create index idx_L2DCACHE_ft_job_group on L2DCACHE_fired_triggers(JOB_GROUP);
create index idx_L2DCACHE_ft_job_stateful on L2DCACHE_fired_triggers(IS_STATEFUL);
create index idx_L2DCACHE_ft_job_req_recov on L2DCACHE_fired_triggers(REQUESTS_RECOVERY);

drop table al_que_calendars;
drop table al_que_fired_triggers;
drop table al_que_trigger_listeners;
drop table al_que_blob_triggers;
drop table al_que_cron_triggers;
drop table al_que_simple_triggers;
drop table al_que_triggers;
drop table al_que_job_listeners;
drop table al_que_job_details;
drop table al_que_paused_trigger_grps;
drop table al_que_locks;
drop table al_que_scheduler_state;


CREATE TABLE al_que_job_details
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE al_que_job_listeners
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES al_que_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE al_que_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES al_que_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE al_que_simple_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES al_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE al_que_cron_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES al_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE al_que_blob_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES al_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE al_que_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES al_que_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE al_que_calendars
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE al_que_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE al_que_fired_triggers
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE al_que_scheduler_state
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE al_que_locks
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    PRIMARY KEY (LOCK_NAME)
);
INSERT INTO al_que_locks values('TRIGGER_ACCESS');
INSERT INTO al_que_locks values('JOB_ACCESS');
INSERT INTO al_que_locks values('CALENDAR_ACCESS');
INSERT INTO al_que_locks values('STATE_ACCESS');
INSERT INTO al_que_locks values('MISFIRE_ACCESS');
commit;
create index idx_al_que_j_req_recovery on al_que_job_details(REQUESTS_RECOVERY);
create index idx_al_que_t_next_fire_time on al_que_triggers(NEXT_FIRE_TIME);
create index idx_al_que_t_state on al_que_triggers(TRIGGER_STATE);
create index idx_al_que_t_nft_st on al_que_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_al_que_t_volatile on al_que_triggers(IS_VOLATILE);
create index idx_al_que_ft_trig_name on al_que_fired_triggers(TRIGGER_NAME);
create index idx_al_que_ft_trig_group on al_que_fired_triggers(TRIGGER_GROUP);
create index idx_al_que_ft_trig_nm_gp on al_que_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
create index idx_al_que_ft_trig_volatile on al_que_fired_triggers(IS_VOLATILE);
create index idx_al_que_ft_trig_inst_nm on al_que_fired_triggers(INSTANCE_NAME);
create index idx_al_que_ft_job_name on al_que_fired_triggers(JOB_NAME);
create index idx_al_que_ft_job_group on al_que_fired_triggers(JOB_GROUP);
create index idx_al_que_ft_job_stateful on al_que_fired_triggers(IS_STATEFUL);
create index idx_al_que_ft_job_req_recov on al_que_fired_triggers(REQUESTS_RECOVERY);

drop table loader_calendars;
drop table loader_fired_triggers;
drop table loader_trigger_listeners;
drop table loader_blob_triggers;
drop table loader_cron_triggers;
drop table loader_simple_triggers;
drop table loader_triggers;
drop table loader_job_listeners;
drop table loader_job_details;
drop table loader_paused_trigger_grps;
drop table loader_locks;
drop table loader_scheduler_state;


CREATE TABLE loader_job_details
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE loader_job_listeners
  (
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES loader_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE loader_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP)
    REFERENCES loader_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE loader_simple_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES loader_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE loader_cron_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES loader_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE loader_blob_triggers
  (
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES loader_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE loader_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
    REFERENCES loader_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE loader_calendars
  (
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE loader_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE loader_fired_triggers
  (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE loader_scheduler_state
  (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE loader_locks
  (
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    PRIMARY KEY (LOCK_NAME)
);
INSERT INTO loader_locks values('TRIGGER_ACCESS');
INSERT INTO loader_locks values('JOB_ACCESS');
INSERT INTO loader_locks values('CALENDAR_ACCESS');
INSERT INTO loader_locks values('STATE_ACCESS');
INSERT INTO loader_locks values('MISFIRE_ACCESS');
commit;
create index idx_loader_j_req_recovery on loader_job_details(REQUESTS_RECOVERY);
create index idx_loader_t_next_fire_time on loader_triggers(NEXT_FIRE_TIME);
create index idx_loader_t_state on loader_triggers(TRIGGER_STATE);
create index idx_loader_t_nft_st on loader_triggers(NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_loader_t_volatile on loader_triggers(IS_VOLATILE);
create index idx_loader_ft_trig_name on loader_fired_triggers(TRIGGER_NAME);
create index idx_loader_ft_trig_group on loader_fired_triggers(TRIGGER_GROUP);
create index idx_loader_ft_trig_nm_gp on loader_fired_triggers(TRIGGER_NAME,TRIGGER_GROUP);
create index idx_loader_ft_trig_volatile on loader_fired_triggers(IS_VOLATILE);
create index idx_loader_ft_trig_inst_name on loader_fired_triggers(INSTANCE_NAME);
create index idx_loader_ft_job_name on loader_fired_triggers(JOB_NAME);
create index idx_loader_ft_job_group on loader_fired_triggers(JOB_GROUP);
create index idx_loader_ft_job_stateful on loader_fired_triggers(IS_STATEFUL);
create index idx_loader_ft_job_req_recov on loader_fired_triggers(REQUESTS_RECOVERY);




purge recyclebin;


