require 'net/http'
require 'uri'
require 'json'
require 'highline/import'

puts "\n\n" # spacer

# Step 0 - Read in username, password and data freeze name from console
# Get username
username = ''
5.times do
	username = ask("Enter your JIRA username: ")
	break if username.gsub(/\s+/,'') != ''
end
abort('\nNo username provided') if username == ''

# Get password
password = ''
5.times do
	password = ask("Enter your password: "){|x| x.echo = '*'}
	break if password.gsub(/\s+/,'') != ''
end
abort('\nNo password provided') if password == ''

# Get a name for the data freeze
freeze_name = ''
5.times do
	freeze_name = ask("Enter a name for the data freeze (i.e. \"__?__ Data Freeze\"): ")
	break if freeze_name.gsub(/\s+/,'') != ''
end
abort('\nNo name provided for data freeze') if freeze_name == ''

#------------ CONFIGURATIONS (START) ------------#
base_url = 'http://tcgadcc.com/'
issue_url = base_url + 'rest/api/latest/issue/'
project_name = "TCGA" # project key
parent_type = "Collaboration" #issue type for parent ticket
child_type = "Collaborative Task" # issue type for subtask
triage_transition_id = 141 # Transition ID for triaging. See 'Administration' => 'Issues' => 'workflows' => 'Design'
label = "data_freeze"

# Ticket summary, description and dependency
ticket_key_idx = 0 # Ticket key - DO NOT MODIFY - will be populated as tickets are created
ticket_summary_idx = 1 # Ticket summary
ticket_description_idx = 2 # Ticket description
ticket_dependency_idx = 3 # Ticket dependency - List index of ticket that current ticket depends on (using the given order, where the first ticket row is index 0)

tickets = [
	[nil,"#{freeze_name} Data Freeze","This ticket lists the tasks required to complete a data freeze and tracks the progress of their completion",nil], # Parent ticket
	[nil,"AWG: (Phase 1) Appoint a data curator and notify the DCC","Appoint a curator and notify the DCC. This curator will be the main point of contact for the AWG to the DCC and Program Office\n# Provide the curator name and contact information by adding a comment\n# Assign this ticket to your DCC contact",nil], # Sub-task
	[nil,"DCC: (Phase 1) Create a curator JIRA account","# Once the AWG has appointed a curator, check if he/she has a JIRA account\n** If so, add a comment on this and skip to Step 8\n# Request a JIRA account for the curator through the Scientific Lead via a DCCT ticket\n# Create a 'depends on' link to the ticket created in Step 2\n# Click on 'Start Progress' and then 'Process Issue' to put the ticket into *waiting* status\n# Send the following email to the curator (with the necessary modifications):\n{panel}Hi <name of curator>,\n\nThe DCC is in the process of creating a JIRA account for you so that you can track and assess the progress of your data freeze.  You will be notified of your username and password by a separate email generated by our JIRA system.\nPlease complete any tickets that will be assigned to you in a timely manner.  If you have questions for any ticket, please let me know by adding a comment to it.\n\nThank you,\n<your name and contact information>{panel}\n# Add a comment to confirm that the previous action was completed by pasting in the email message\n# When a JIRA account has been created, click on 'Resume Progress' to make the ticket active\n# Assign all sub-tasks in the parent Collaboration ticket that beginning with the title \"AWG: \" to the curator\n** *Exception:* Assign the sub-task \"AWG: (Phase 1) Create a wiki contacts table\" to the Program Office AWG Coordinator",1], # Sub-task
	[nil,"AWG: (Phase 1) Create a wiki contacts table","# Create a contacts table for AWG members on the wiki, with the curator visibly noted. Ensure that the table contains the following headers:\n** First Name\n** Last Name\n** Institution\n** Analysis/Data Group\n** Email\n# Once you have performed these actions, add a comment stating this\n# Assign this ticket to the DCC contact (i.e. the reporter of this ticket)",nil], # Sub-task
	[nil,"DCC: (Phase 1) Create and forward Data Freeze List to AWG","# Carry out instructions indicated in [WI-G-112-002|https://wiki.nci.nih.gov/x/n4Z4B]",2], # Sub-task
	[nil,"AWG: (Phase 1) Filter the Data Freeze List and provide this to the DCC","The DCC will provide a Data Freeze List, which contains all the versions of archives relevant to the disease study covered by the AWG. Filter and update this list as the samples for analysis solidify.\n# Remove complete rows from the Data Freeze List so that only data used for analysis remain\n# Assign this ticket to your DCC contact\n** *Note:* If any discrepancies are found, the list will be forwarded back to you for modifications. Repeat this step until this ticket is resolved by the DCC",4], # Sub-task
	[nil,"DCC: (Phase 1) Generate a Publication Page","# Carry out instructions indicated in [WI-G-112-003|https://wiki.nci.nih.gov/x/Kg2SB]",nil], # Sub-task
	[nil,"DCC: (Phase 1) Freeze archives in the database","# Carry out instructions indicated in [WI-G-112-005|https://wiki.nci.nih.gov/x/KQRjB]\n# Create a 'depends on' link to the ticket created in the previous step",5], # Sub-task
	[nil,"DCC: (Phase 1) Bundle archives and link to Publication Page","# Carry out instructions indicated in [WI-G-112-004|https://wiki.nci.nih.gov/x/RRmSB]",5], # Sub-task
	[nil,"DCC: (Phase 1) Announce the Publication Page to the AWG","Announce the location of the Publication Page to the AWG mailing list by sending the following email (with the necessary modifications):\n{panel}Dear AWG members,\n\nI have assembled a publication page which will eventually tie together all the data to support the <data freeze> study.  This page can be accessed here:\n\n<publication page URL>\n\nCurrently only DCC-submitted data archives and their accompanying MAGE-TAB archives are frozen and linked to this page.\nPlease review the section(s) you are involved with and let me know if you have any questions or concerns.\n\nThank you for taking the time to review this.\n\n<your name>{panel}\n# Add a comment to confirm that the previous action was completed by pasting in the email message",8], # Sub-task
	[nil,"AWG: (Phase 2) Provide supplementary data to the DCC","# Provide the DCC with supplementary data used for or produced by analysis. Keep in mind that the AWG is responsible for the quality and content of supplementary data, as they are not verified by the DCC. Some examples of supplementary data/files include:\n** BAM Freeze list\n** Sample Inclusion List\n** Data Matrices\n** Data from an alternate pipeline, differing from those officially submitted to the DCC\n# Once you have performed these actions, add a comment stating this\n# Assign this ticket to the DCC contact",nil], # Sub-task
	[nil,"DCC: (Phase 2) Freeze supplementary data","# Carry out instructions indicated in [WI-G-112-006|https://wiki.nci.nih.gov/x/mYZ4B]\n# Announce your Publication Page updates to the AWG mailing list by sending the following email (with the necessary modifications):\n{panel}Dear AWG members,\n\nThe <data freeze> publication page has been updated to include supplementary data and can be accessed here:\n\n<publication page URL>\n\nPlease review the section(s) you are involved with and let me know if you have any questions or concerns.\n\nThank you for taking the time to review this.\n\n<your name>{panel}\n# Add a comment to confirm that the previous action was completed by pasting in the email message",10], # Sub-task
	[nil,"AWG: (Phase 3) Provide auxiliary data and analysis tools to the DCC","# Provide the DCC with auxiliary data and links to analysis tools that the AWG would like associated with the paper. For example, a link to a tool that facilitates the viewing of publication data. Keep in mind that the AWG is responsible for the quality and content of auxiliary data, as they are not verified by the DCC.\n# Once you have performed these actions, add a comment stating this (or that no auxiliary data exists)\n# Assign this ticket to the DCC contact",nil], # Sub-task
	[nil,"DCC: (Phase 3) Freeze auxiliary data and analysis tools and link to Publication Page","# Carry out instructions indicated in [WI-G-112-006|https://wiki.nci.nih.gov/x/mYZ4B]\n# Announce your Publication Page updates to the AWG mailing list by sending the following email (with the necessary modifications):\n{panel}Dear AWG members,\n\nThe <data freeze> publication page has been updated to include auxiliary data and can be accessed here:\n\n<publication page URL>\n\nPlease review the section(s) you are involved with and let me know if you have any questions or concerns.\n\nThank you for taking the time to review this.\n\n<your name>{panel}\n# Add a comment to confirm that the previous action was completed by pasting in the email message",12] # Sub-task
]

#------------ CONFIGURATIONS (END) ------------#

#------------ METHODS (START) ------------#

# (Method) Determines if an error occurred from the server response. If so, kill app
def check_error(response)
	return if response.code.include?("204")
	abort("\nAn error occurred while generating your tickets:\n#{response.message}[#{response.code}]: #{response.body}") if !response.code.include?("201")
end

# (Method) Extracts the ticket key from the server response
def get_key(response)
	return response.body.gsub('"','').scan(/key\:(\w+\-\d+)/)[0][0]
end
#------------ METHODS (END) ------------#

# Check if username and password are correct
puts "Attempting to log in..."
uri = URI.parse(base_url + 'rest/auth/latest/session')
http = Net::HTTP.new(uri.host, uri.port)
request = Net::HTTP::Post.new(uri.request_uri)
request["Content-Type"] = "application/json"
request.body = {
	"username" => username,
	"password" => password
}.to_json
response = http.request(request)
abort ("\nUsername or password is incorrect") if !response.code.include?("200")
puts "You are logged in!"

# Step 1 - Create parent ticket
puts "\nCreating parent ticket..."
uri = URI.parse(issue_url)
http = Net::HTTP.new(uri.host, uri.port)
request = Net::HTTP::Post.new(uri.request_uri)
request.basic_auth(username, password)
request["Content-Type"] = "application/json"
request.body = {"fields" => {
	"project" => {"key" => project_name},
	"summary" => tickets[0][ticket_summary_idx],
	"description" => tickets[0][ticket_description_idx],
	"issuetype"  => {"name" => parent_type},
	"labels" => [label,freeze_name.tr(' ','_')]
}}.to_json
response = http.request(request)

check_error(response) # Check that ticket was properly formed before proceeding
parent_key = get_key(response) # Extract key of ticket that was just created
tickets[0][ticket_key_idx] = parent_key # Append key to ticket table

# Step 2 - Create sub-tasks
puts "\nCreating sub-tasks..."
for x in 1...tickets.length do
	puts "\t#{tickets[x][ticket_summary_idx]}"
	request.body = {"fields" => {
	"project" => {"key" => project_name},
	"summary" => tickets[x][ticket_summary_idx],
	"description" => tickets[x][ticket_description_idx],
	"issuetype"  => {"name" => child_type},
	"parent" => {"key" => parent_key},
	"labels" => [label,freeze_name.tr(' ','_')]
	}}.to_json
	response = http.request(request)

	check_error(response) # Check that ticket was properly formed before proceeding
	child_key = get_key(response) # Extract key of ticket that was just created
	tickets[x][ticket_key_idx] = child_key # Append key to ticket table
end

# Step 3 - Create ticket dependency links, triage ticket and assign ticket to current user
puts "\nLinking, triaging and assigning tickets..."
tickets.each{|array|
	puts "\t[#{array[ticket_key_idx]}] #{array[ticket_summary_idx]}"
	# [A] Create dependency link
	dependency_idx = array[ticket_dependency_idx] # get index of ticket that this ticket is dependent on
	if (dependency_idx)
		dependency_key = tickets[dependency_idx][ticket_key_idx] # key of ticket that this ticket is dependent on
		uri = URI.parse(issue_url + array[ticket_key_idx] + '/remotelink')
		http = Net::HTTP.new(uri.host, uri.port)
		request = Net::HTTP::Post.new(uri.request_uri)
		request.basic_auth(username, password)
		request["Content-Type"] = "application/json"
		request.body = {"relationship" => "depends on",
			"object" => {
			"url" => base_url + 'browse/' + dependency_key,
			"title" => dependency_key,
			"summary" => tickets[dependency_idx][ticket_summary_idx],
			"icon" => {"url16x16" => base_url + 'images/icons/issue_subtask.gif'}
		}}.to_json
		response = http.request(request)
		check_error(response) # Check that link was properly formed before proceeding
	end
	
	# [B] Triage ticket
	uri = URI.parse(issue_url + array[ticket_key_idx] + '/transitions')
	http = Net::HTTP.new(uri.host, uri.port)
	request = Net::HTTP::Post.new(uri.request_uri)
	request.basic_auth(username, password)
	request["Content-Type"] = "application/json"
	request.body = {"transition" => {"id" => triage_transition_id}}.to_json
	response = http.request(request)
	check_error(response) # Check that ticket was properly triaged before proceeding
	
	# [C] Assign ticket to current user
	uri = URI.parse(issue_url + array[ticket_key_idx] + '/assignee')
	http = Net::HTTP.new(uri.host, uri.port)
	request = Net::HTTP::Put.new(uri.request_uri)
	request.basic_auth(username, password)
	request["Content-Type"] = "application/json"
	request.body = {"name" => username}.to_json
	response = http.request(request)
	check_error(response) # Check that ticket was properly assigned before proceeding
	
}

# Print confirmation
puts "\nYour ticket \"[#{tickets[0][ticket_key_idx]}] #{tickets[0][ticket_summary_idx]}\" has been created: #{base_url}browse/#{tickets[0][ticket_key_idx]}"