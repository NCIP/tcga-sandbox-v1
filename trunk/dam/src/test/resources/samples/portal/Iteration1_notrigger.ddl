-- ------------------------
-- LEVEL 2 DATA -----------
-- ------------------------

--   --------------------------------------------------
--   Generated by Enterprise Architect Version 6.5.805
--   Created On : Monday, 18 February, 2008 
--   DBMS       : Oracle 
--   -------------------------------------------------- 

-- Due to time constraints, I had to use EA auto-DDL.
-- Looks pretty good, but not my usual SOP.
-- Indexes for PK and UNIQ contraints are automatically created by Oracle.
-- Need to add FK indexes


--  Drop Tables, Stored Procedures and Views 
DROP TRIGGER SET_CENTER_center_id;
DROP SEQUENCE CENTER_center_id_SEQ;
DROP TABLE CENTER CASCADE CONSTRAINTS
;
DROP TABLE CENTER_DISEASE CASCADE CONSTRAINTS
;
DROP SEQUENCE CENTER_PLATFO_center_platf_SEQ;
DROP TABLE CENTER_PLATFORM CASCADE CONSTRAINTS
;
DROP TRIGGER SET_COMPOSITE_ELE_composite_el;
DROP SEQUENCE COMPOSITE_ELE_composite_el_SEQ;
DROP TABLE COMPOSITE_ELEMENT CASCADE CONSTRAINTS
;
DROP TRIGGER SET_COMPOSITE_SET_composite_el;
DROP SEQUENCE COMPOSITE_SET_composite_el_SEQ;
DROP TABLE COMPOSITE_ELEMENT_SET CASCADE CONSTRAINTS
;
DROP TRIGGER SET_DATA_SET_data_set_id;
DROP SEQUENCE DATA_SET_data_set_id_SEQ;
DROP TABLE DATA_SET CASCADE CONSTRAINTS
;
DROP TRIGGER SET_DATA_TYPE_data_type_id;
DROP SEQUENCE DATA_TYPE_data_type_id_SEQ;
DROP TABLE DATA_TYPE CASCADE CONSTRAINTS
;
DROP TRIGGER SET_DISEASE_disease_id;
DROP SEQUENCE DISEASE_disease_id_SEQ;
DROP TABLE DISEASE CASCADE CONSTRAINTS
;
DROP TRIGGER SET_EXPERIMENT_experiment_id;
DROP SEQUENCE EXPERIMENT_experiment_id_SEQ;
DROP TABLE EXPERIMENT CASCADE CONSTRAINTS
;
DROP TRIGGER SET_HYBREF_hybridization;
DROP SEQUENCE HYBREF_hybridization_SEQ;
DROP TABLE HYBRIDIZATION_REF CASCADE CONSTRAINTS
;

DROP TRIGGER SET_HDGroup_hybridization;
DROP SEQUENCE HDGroup_hybridization_SEQ;
DROP TABLE HYBRIDIZATION_DATA_GROUP CASCADE CONSTRAINTS
;

DROP TABLE HYBRIDIZATION_VALUE CASCADE CONSTRAINTS;

DROP TRIGGER SET_PLATFORM_platform_id;
DROP SEQUENCE PLATFORM_platform_id_SEQ;
DROP TABLE PLATFORM CASCADE CONSTRAINTS
;

DROP TABLE PLATFORM_TYPE CASCADE CONSTRAINTS
;

DROP TABLE COMPOSITE_ELEMENT_CONSTANT CASCADE CONSTRAINTS;

DROP SEQUENCE cna_value_seq;
DROP SEQUENCE SET_cna_value;
DROP TABLE cna_value;


--  Create Tables 
CREATE TABLE CENTER ( 
	center_id NUMBER(38) NOT NULL,    --  Internal ID. 
	domain_name VARCHAR2(50) NOT NULL    --  Official domain name from the DCC. 
) 
;

COMMENT ON COLUMN CENTER.center_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN CENTER.domain_name
    IS 'Official domain name from the DCC.'
;

CREATE TABLE CENTER_DISEASE ( 
	center_id NUMBER(38) NOT NULL,    --  Internal ID. 
	disease_id NUMBER(38) NOT NULL    --  Internal ID. 
) 
;

COMMENT ON COLUMN CENTER_DISEASE.center_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN CENTER_DISEASE.disease_id
    IS 'Internal ID.'
;

CREATE TABLE CENTER_PLATFORM (
	center_platform_id NUMBER(38) NOT NULL,  --  Internal ID.
	center_id NUMBER(38) NOT NULL,    --  Internal ID.
	platform_id NUMBER(38) NOT NULL,    --  Internal ID.
	center_type VARCHAR2(5) NOT NULL    --  Type of TCGA center, including CGCC, GSC, and BCR.
) 
;

COMMENT ON COLUMN CENTER_PLATFORM.center_platform_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN CENTER_PLATFORM.center_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN CENTER_PLATFORM.platform_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN CENTER_PLATFORM.center_type
    IS 'Type of TCGA center, including CGCC, GSC, and BCR.'
;


CREATE SEQUENCE COMPOSITE_ELE_composite_el_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE TABLE COMPOSITE_ELEMENT ( 
	composite_element_id NUMBER(38) NOT NULL,    --  Internal ID. 
	data_set_id NUMBER(38) NOT NULL,    --  Internal ID. 
	name VARCHAR2(50) NOT NULL,    --  The name of the composite element, often a probe or probe set name. 
	order_by NUMBER(38) NOT NULL    --  The order in which the composite element appeared in the source data file for the experiment.
) 
;

COMMENT ON COLUMN COMPOSITE_ELEMENT.composite_element_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN COMPOSITE_ELEMENT.data_set_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN COMPOSITE_ELEMENT.name
    IS 'The name of the composite element, often a probe or probe set name.'
;

COMMENT ON COLUMN COMPOSITE_ELEMENT.order_by
    IS 'The order in which the composite element appeared in the source data file for the experiement.'
;

--only for unit test schema
CREATE TABLE AVG_COL_LEN (
	   TABLE_NAME VARCHAR2(30),
	   COLUMN_NAME VARCHAR2(30),
	   AVG_COL_LEN NUMBER,
	   LAST_ANALYZED DATE
);

ALTER TABLE AVG_COL_LEN ADD CONSTRAINT PK_AVGCOLLEN
	PRIMARY KEY (TABLE_NAME, COLUMN_NAME) ;


CREATE TABLE COMPOSITE_ELEMENT_CONSTANT (
        composite_element_id number(38) not null,
	constant_name varchar2(50) not null,
	constant_value varchar2(50) not null
);

CREATE TABLE DATA_SET ( 
	data_set_id NUMBER(38) NOT NULL,    --  Internal ID. 
	experiment_id NUMBER(38) NOT NULL,    --  The original experiment in which the file appeared.  Internal ID. 
	source_file_name VARCHAR2(255) NOT NULL,    --  The full path and name of the data's source file. 
	source_file_type VARCHAR2(50) NOT NULL,    --  The type of data contained in the source file.  E.g., snp data may have copynumber data as well as birdseed data. 
	access_level VARCHAR2(10) NOT NULL    --  Indicates if the data set contains public or protected data. 
) 
;
ALTER TABLE DATA_SET ADD load_complete NUMBER(1) DEFAULT 1; -- defaults to one because all rows currently in db should be in use.
ALTER TABLE DATA_SET ADD use_in_DAM NUMBER(1) DEFAULT 1;
ALTER TABLE DATA_SET ADD DAM_comments VARCHAR2(255);

COMMENT ON COLUMN DATA_SET.load_complete IS '0/1 to indicate when the data set (file) is completely loaded into the DB.  Checking this column avoids trying to pull out a partial data set and crashing an app.  Doing the complete load in a single transaction is not possible due to the use of sqlldr and the size of the data.';
COMMENT ON COLUMN DATA_SET.use_in_DAM IS '0/1 to indicate if this data set should be a part of the DAM.  In certain cases, it should not.  If set to zero, the DAM_Comments column must have a value.';
COMMENT ON COLUMN DATA_SET.DAM_comments IS 'If column use_in_DAM is set to zero, this column indicates why.';

COMMENT ON COLUMN DATA_SET.data_set_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN DATA_SET.experiment_id
    IS 'The original experiment in which the file appeared.  Internal ID.'
;

COMMENT ON COLUMN DATA_SET.source_file_name
    IS 'The full path and name of the data''s source file.'
;

COMMENT ON COLUMN DATA_SET.source_file_type
    IS 'The type of data contained in the source file.  E.g., snp data may have copynumber data as well as birdseed data.'
;

COMMENT ON COLUMN DATA_SET.access_level
    IS 'Indicates if the data set contains public or protected data.'
;

CREATE TABLE DATA_TYPE ( 
	data_type_id NUMBER(38) NOT NULL,    --  Internal ID. 
	name VARCHAR2(50) NOT NULL    --  The type of data generated by the platform, such as cna or snp. 
) 
;

COMMENT ON COLUMN DATA_TYPE.data_type_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN DATA_TYPE.name
    IS 'The type of data generated by the platform, such as cna or snp.'
;

CREATE TABLE DISEASE ( 
	disease_id NUMBER(38) NOT NULL,    --  Internal ID. 
	abbreviation VARCHAR2(10) NOT NULL    --  Short abbreviated name for the disease.  E.g., GBM for glioblastoma malforme. 
) 
;

COMMENT ON COLUMN DISEASE.disease_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN DISEASE.abbreviation
    IS 'Short abbreviated name for the disease.  E.g., GBM for glioblastoma malforme.'
;

CREATE TABLE EXPERIMENT (
	experiment_id NUMBER(38) NOT NULL,    --  Internal ID.
	center_platform_id NUMBER(38) NOT NULL,
	base_name VARCHAR2(255) NOT NULL,    --  The base name of the experiment could be derived but is here for convenience.  It is comprised of center, disease, platform, center's deposit batch number, and data revision number.
	data_deposit_batch NUMBER(38) NOT NULL,    --  Integer representing which submission batch the data comes from.  It is the same as the DCC serial number of an archive.
	data_revision NUMBER(38) NOT NULL    --  An integer that represents the which revision of the data files these data come from.
) 
;

COMMENT ON COLUMN EXPERIMENT.experiment_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN EXPERIMENT.center_platform_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN EXPERIMENT.base_name
    IS 'The base name of the experiment could be derived but is here for convenience.  It is comprised of center, disease, platform, center''s deposit batch number, and data revision number.'
;

COMMENT ON COLUMN EXPERIMENT.data_deposit_batch
    IS 'Integer representing which submission batch the data comes from.  It is the same as the DCC serial number of an archive.'
;

COMMENT ON COLUMN EXPERIMENT.data_revision
    IS 'An integer that represents the which revision of the data files these data come from.'
;

CREATE TABLE HYBRIDIZATION_DATA_GROUP ( 
	hybridization_data_group_id NUMBER(38) NOT NULL,    --  Internal ID. 
	data_set_id NUMBER(38) NOT NULL,    --  Internal ID. 
	group_column_number NUMBER(38) NOT NULL,    --  Often there are more than one datapoint per hybridization ref in a data file.  This integer represents in which column this particular data point exists.  Eg., if the call and confidence are provided, call is at column 1 where confidence is at column 2. 
	group_column_name VARCHAR2(20) NOT NULL,    --  The name of the data column. 
	data_level NUMBER(38) NOT NULL,    --  The level of the data. 
	data_type_id NUMBER(38) NOT NULL    --  The data type these data describe. 
) 
;

COMMENT ON COLUMN HYBRIDIZATION_DATA_GROUP.hybridization_data_group_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN HYBRIDIZATION_DATA_GROUP.data_set_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN HYBRIDIZATION_DATA_GROUP.group_column_number
    IS 'Often there are more than one datapoint per hybridization ref in a data file.  This integer represents in which column this particular data point exists.  Eg., if the call and confidence are provided, call is at column 1 where confidence is at column 2.'
;

COMMENT ON COLUMN HYBRIDIZATION_DATA_GROUP.group_column_name
    IS 'The name of the data column.'
;

COMMENT ON COLUMN HYBRIDIZATION_DATA_GROUP.data_level
    IS 'The level of the data.'
;

COMMENT ON COLUMN HYBRIDIZATION_DATA_GROUP.data_type_id
    IS 'The data type these data describe.'
;

CREATE TABLE HYBRIDIZATION_REF ( 
	hybridization_ref_id NUMBER(38) NOT NULL,    --  Internal ID. 
	experiment_id NUMBER(38) NOT NULL,    --  Internal ID. 
	hybridization_ref_name VARCHAR2(50) NOT NULL,    --  The name of the hybridization reference, often the biospecimen_barcode. 
	isExact VARCHAR2(1) NOT NULL,    --  Y= exact barcode found in the DCC's biospeciman_barcode table.  N=not found. 
	bestBarcode VARCHAR2(50) NOT NULL,    --  If isExact=Y, then bestBarcode=hybridization_ref_name, otherwise it is the name of the best guess to what the barcode is 
	sample_name VARCHAR2(50) NOT NULL,    --  Although the sample name can always be extracted from the barcode, this column is here for the convenience of the user.
	isCorrect VARCHAR2(1) NOT NULL -- is the best barcode in the DCC DB?? Y=Yes
) 
;

COMMENT ON COLUMN HYBRIDIZATION_REF.hybridization_ref_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN HYBRIDIZATION_REF.hybridization_ref_name
    IS 'The name of the hybridization reference, often the biospecimen_barcode.'
;

COMMENT ON COLUMN HYBRIDIZATION_REF.isExact
    IS 'If isExact=Y, then bestBarcode=hybridization_ref_name, otherwise it is the name of the best guess to what the barcode is' 
;

COMMENT ON COLUMN HYBRIDIZATION_REF.isCorrect
    IS 'is the best barcode in the DCC DB?? Y=Yes' 
;

COMMENT ON COLUMN HYBRIDIZATION_REF.bestBarcode
    IS 'If isExact=Y, then bestBarcode=hybridization_ref_name, otherwise it is the name of the best batch to the barcode in the DCC.biospecimen_barcode table.'
;

COMMENT ON COLUMN HYBRIDIZATION_REF.sample_name
    IS 'Although the sample name can always be extracted from the barcode, this column is here for the convenience of the user.'
;

CREATE TABLE HYBRIDIZATION_VALUE (
        hybridization_data_group_id NUMBER(38) NOT NULL, -- Internal ID.
	composite_element_id NUMBER(38) NOT NULL, -- Internal ID.
	hybridization_ref_id NUMBER(38) NOT NULL, -- Internal ID.
	value VARCHAR2(255) NOT NULL --  Value of the data, as a string.  This allows for exact precision and not floating point error.  Convert as needed. 
) ;

COMMENT ON COLUMN HYBRIDIZATION_VALUE.value
    IS 'Value of the data, as a string.  This allows for exact precision and not floating point error.  Convert as needed.'
;

CREATE TABLE PLATFORM ( 
	platform_id NUMBER(38) NOT NULL,    --  Internal ID. 
	name VARCHAR2(100) NOT NULL    --  Name of the platform. 
) 
;

COMMENT ON COLUMN PLATFORM.platform_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN PLATFORM.name
    IS 'Name of the platform.'
;

CREATE TABLE PLATFORM_TYPE ( 
	platform_id NUMBER(38) NOT NULL,    --  Internal ID. 
	data_type_id NUMBER(38) NOT NULL    --  Internal ID. 
) 
;

COMMENT ON COLUMN PLATFORM_TYPE.platform_id
    IS 'Internal ID.'
;

COMMENT ON COLUMN PLATFORM_TYPE.data_type_id
    IS 'Internal ID.'
;

CREATE TABLE cna_value (
    cna_value_id  NUMBER(38) NOT NULL,
    data_set_id  NUMBER(38) NOT NULL,
    hybridization_ref_id  NUMBER(38) NOT NULL,
    chromosome VARCHAR2(2) NOT NULL,
    chr_start NUMBER(38) NOT NULL,
    chr_stop NUMBER(38) NOT NULL,
    num_mark NUMBER(7) NULL,
    seg_mean VARCHAR2(50) NOT NULL  -- so there is no floating point errors.
);


--  Create Primary Key Constraints 
ALTER TABLE CENTER ADD CONSTRAINT PK_CENTER 
	PRIMARY KEY (center_id) ;

ALTER TABLE CENTER_DISEASE ADD CONSTRAINT PK_CENTER_DISEASE 
	PRIMARY KEY (center_id, disease_id) 
;

ALTER TABLE CENTER_PLATFORM ADD CONSTRAINT PK_CENTER_PLATFORM
	PRIMARY KEY (center_platform_id) 
;

ALTER TABLE COMPOSITE_ELEMENT ADD CONSTRAINT PK_COMPOSITE_ELEMENT 
	PRIMARY KEY (composite_element_id) 
;


ALTER TABLE COMPOSITE_ELEMENT_CONSTANT ADD CONSTRAINT PK_COMPELE_CONSTANT
        PRIMARY KEY (composite_element_id, constant_name);

ALTER TABLE DATA_SET ADD CONSTRAINT PK_DATA_SET 
	PRIMARY KEY (data_set_id) 
;

ALTER TABLE DATA_TYPE ADD CONSTRAINT PK_DATA_TYPE 
	PRIMARY KEY (data_type_id) 
;

ALTER TABLE DISEASE ADD CONSTRAINT PK_DISEASE 
	PRIMARY KEY (disease_id) 
;

ALTER TABLE EXPERIMENT ADD CONSTRAINT PK_EXPERIMENT 
	PRIMARY KEY (experiment_id) 
;

ALTER TABLE HYBRIDIZATION_DATA_GROUP ADD CONSTRAINT PK_HYBRIDIZATION_DATA_GRP 
	PRIMARY KEY (hybridization_data_group_id) 
;

ALTER TABLE HYBRIDIZATION_REF ADD CONSTRAINT PK_HYBRIDIZATION_REF 
	PRIMARY KEY (hybridization_ref_id) 
;

ALTER TABLE HYBRIDIZATION_VALUE ADD CONSTRAINT PK_HYBRIDIZATION_VALUE
      PRIMARY KEY (hybridization_ref_id, composite_element_id, hybridization_data_group_id) ;

ALTER TABLE PLATFORM ADD CONSTRAINT PK_PLATFORM 
	PRIMARY KEY (platform_id) 
;

ALTER TABLE PLATFORM_TYPE ADD CONSTRAINT PK_PLATFORM_TYPE 
	PRIMARY KEY (platform_id, data_type_id) 
;

ALTER TABLE cna_value ADD CONSTRAINT PK_CNA_VALUE PRIMARY KEY (cna_value_id);



--  Create Constraints
ALTER TABLE CENTER
	ADD CONSTRAINT CENTER_AK1 UNIQUE (domain_name)
;

ALTER TABLE CENTER_PLATFORM
ADD CONSTRAINT CENTER_PLATFORM_TYPE_CC CHECK (CENTER_TYPE IN ('CGCC', 'GSC', 'BCR'))
;

ALTER TABLE CENTER_PLATFORM
	ADD CONSTRAINT CENTER_PLATFORM_AK1 UNIQUE (center_id, platform_id)
;

ALTER TABLE COMPOSITE_ELEMENT
	ADD CONSTRAINT COMPOSITE_ELEMENT_AK1 UNIQUE (name, data_set_id)
;

ALTER TABLE DATA_SET
	ADD CONSTRAINT DATA_SET_AK1 UNIQUE (source_file_name)
;

ALTER TABLE DATA_SET
ADD CONSTRAINT DATA_SET_ACCESS_LEVEL_CC CHECK (access_level in ('PUBLIC', 'PROTECTED'));

ALTER TABLE DATA_TYPE
	ADD CONSTRAINT DATA_TYPE_AK1 UNIQUE (name)
;

ALTER TABLE DISEASE
	ADD CONSTRAINT DISEASE_AK1 UNIQUE (abbreviation)
;

ALTER TABLE EXPERIMENT
	ADD CONSTRAINT EXPERIMENT_AK1 UNIQUE (base_name, data_deposit_batch, data_revision)
;

ALTER TABLE EXPERIMENT ADD CONSTRAINT FK_EXPERIMENT_CENTER_PLATFORM
	FOREIGN KEY (center_platform_id) REFERENCES CENTER_PLATFORM (center_platform_id)
;

ALTER TABLE HYBRIDIZATION_DATA_GROUP
ADD CONSTRAINT HDGROUP_DATA_LEVEL_CC CHECK (data_level between 1 and 3);

ALTER TABLE HYBRIDIZATION_DATA_GROUP
	ADD CONSTRAINT HYBRIDIZATION_DATA_GROUP_AK1 UNIQUE (data_set_id, group_column_number)
;

ALTER TABLE HYBRIDIZATION_DATA_GROUP
	ADD CONSTRAINT HYBRIDIZATION_DATA_GROUP_AK2 UNIQUE (data_set_id, group_column_name)
;

ALTER TABLE HYBRIDIZATION_REF
	ADD CONSTRAINT HYBRIDIZATION_REF_AK1 UNIQUE (hybridization_ref_name, experiment_id)
;

ALTER TABLE PLATFORM
	ADD CONSTRAINT PLATFORM_AK1 UNIQUE (name)
;

ALTER TABLE cna_value ADD CONSTRAINT cna_value_ak1 UNIQUE (hybridization_ref_id, data_set_id, chromosome, chr_start, chr_stop);


--  Create Triggers 
CREATE SEQUENCE CENTER_center_id_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_CENTER_center_id
BEFORE INSERT
ON CENTER
FOR EACH ROW
BEGIN
  SELECT CENTER_center_id_SEQ.NEXTVAL
  INTO :NEW.center_id
  FROM DUAL;
END;
/

CREATE SEQUENCE CENTER_PLATFO_center_platf_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_CENTER_PLATFO_center_platf
BEFORE INSERT
ON CENTER_PLATFORM
FOR EACH ROW
BEGIN
  SELECT CENTER_PLATFO_center_platf_SEQ.NEXTVAL
  INTO :NEW.center_platform_id
  FROM DUAL;
END;
/

-- CREATE OR REPLACE TRIGGER SET_COMPOSITE_ELE_composite_el
-- BEFORE INSERT
-- ON COMPOSITE_ELEMENT
-- FOR EACH ROW
-- BEGIN
--   SELECT COMPOSITE_ELE_composite_el_SEQ.NEXTVAL
--   INTO :NEW.composite_element_id
--   FROM DUAL;
--   dbms_output.put_line(:NEW.composite_element_id);
-- END;
-- /

CREATE SEQUENCE DATA_SET_data_set_id_SEQ
INCREMENT BY 1
START WITH 11
NOMAXVALUE
MINVALUE 11
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_DATA_SET_data_set_id
BEFORE INSERT
ON DATA_SET
FOR EACH ROW
BEGIN
  SELECT DATA_SET_data_set_id_SEQ.NEXTVAL
  INTO :NEW.data_set_id
  FROM DUAL;
END;
/

CREATE SEQUENCE DATA_TYPE_data_type_id_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_DATA_TYPE_data_type_id
BEFORE INSERT
ON DATA_TYPE
FOR EACH ROW
BEGIN
  SELECT DATA_TYPE_data_type_id_SEQ.NEXTVAL
  INTO :NEW.data_type_id
  FROM DUAL;
END;
/

CREATE SEQUENCE DISEASE_disease_id_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_DISEASE_disease_id
BEFORE INSERT
ON DISEASE
FOR EACH ROW
BEGIN
  SELECT DISEASE_disease_id_SEQ.NEXTVAL
  INTO :NEW.disease_id
  FROM DUAL;
END;
/

CREATE SEQUENCE EXPERIMENT_experiment_id_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_EXPERIMENT_experiment_id
BEFORE INSERT
ON EXPERIMENT
FOR EACH ROW
BEGIN
  SELECT EXPERIMENT_experiment_id_SEQ.NEXTVAL
  INTO :NEW.experiment_id
  FROM DUAL;
  dbms_output.put_line(:NEW.experiment_id);
END;
/

CREATE SEQUENCE HDGroup_hybridization_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_HDGroup_hybridization
BEFORE INSERT
ON HYBRIDIZATION_DATA_GROUP
FOR EACH ROW
BEGIN
  SELECT HDGroup_hybridization_SEQ.NEXTVAL
  INTO :NEW.hybridization_data_group_id
  FROM DUAL;
END;
/

CREATE SEQUENCE cna_value_seq
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_cna_value
BEFORE INSERT
ON CNA_VALUE
FOR EACH ROW
BEGIN
  SELECT cna_value_seq.NEXTVAL
  INTO :NEW.cna_value_id
  FROM DUAL;
END;
/

CREATE SEQUENCE HYBREF_hybridization_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_HYBREF_hybridization
BEFORE INSERT
ON HYBRIDIZATION_REF
FOR EACH ROW
BEGIN
  SELECT HYBREF_hybridization_SEQ.NEXTVAL
  INTO :NEW.hybridization_ref_id
  FROM DUAL;
  dbms_output.put_line(:NEW.hybridization_ref_id);
END;
/

CREATE SEQUENCE PLATFORM_platform_id_SEQ
INCREMENT BY 1
START WITH 1
NOMAXVALUE
MINVALUE 1
NOCYCLE
NOCACHE
NOORDER;

CREATE OR REPLACE TRIGGER SET_PLATFORM_platform_id
BEFORE INSERT
ON PLATFORM
FOR EACH ROW
BEGIN
  SELECT PLATFORM_platform_id_SEQ.NEXTVAL
  INTO :NEW.platform_id
  FROM DUAL;
END;
/


--  Create Foreign Key Constraints 
ALTER TABLE CENTER_DISEASE ADD CONSTRAINT FK_CENTER_DISEASE_CENTER 
	FOREIGN KEY (center_id) REFERENCES CENTER (center_id)
;

CREATE INDEX center_disease_centerID_idx on center_disease(center_id) ;

ALTER TABLE CENTER_DISEASE ADD CONSTRAINT FK_CENTER_DISEASE_DISEASE 
	FOREIGN KEY (disease_id) REFERENCES DISEASE (disease_id)
;

CREATE INDEX   center_disease_diseaseID_idx on  center_disease( disease_id) ;

ALTER TABLE CENTER_PLATFORM ADD CONSTRAINT FK_CENTER_PLATFORM_CENTER 
	FOREIGN KEY (center_id) REFERENCES CENTER (center_id)
;

CREATE INDEX  CENTER_PLATFORM_CenterID_idx on CENTER_PLATFORM(center_id) ;

ALTER TABLE CENTER_PLATFORM ADD CONSTRAINT FK_CENTER_PLATFORM_PLATFORM 
	FOREIGN KEY (platform_id) REFERENCES PLATFORM (platform_id)
;

CREATE INDEX  CENTER_PLATFORM_platformID_idx ON CENTER_PLATFORM(platform_id) ;


ALTER TABLE COMPOSITE_ELEMENT ADD CONSTRAINT FK_COMP_ELE_dataset
	FOREIGN KEY (data_set_id) REFERENCES data_set (data_set_id)
;
CREATE INDEX COMP_ELE_dsid_ceid_idx on COMPOSITE_ELEMENT(data_set_id, composite_element_id) ;



ALTER TABLE COMPOSITE_ELEMENT_CONSTANT ADD CONSTRAINT FK_COMPELECONSTANT_COMPELE
        FOREIGN KEY (composite_element_id) REFERENCES COMPOSITE_ELEMENT;


ALTER TABLE DATA_SET ADD CONSTRAINT FK_DATA_SET_EXPERIMENT 
	FOREIGN KEY (experiment_id) REFERENCES EXPERIMENT (experiment_id)
;

CREATE INDEX DATA_SET_experimentID_idx ON DATA_SET(experiment_id) ;


CREATE INDEX EXPERIMENT_center_platform_idx ON EXPERIMENT(center_platform_id) ;

ALTER TABLE HYBRIDIZATION_DATA_GROUP ADD CONSTRAINT FK_HDGROUP_DATA_SET 
	FOREIGN KEY (data_set_id) REFERENCES DATA_SET (data_set_id)
;

CREATE INDEX HDGROUP_datasetID_idx ON HYBRIDIZATION_DATA_GROUP(data_set_id) ;



ALTER TABLE HYBRIDIZATION_DATA_GROUP ADD CONSTRAINT FK_HDGROUP_DATA_TYPE
	FOREIGN KEY (data_type_id) REFERENCES DATA_TYPE (data_type_id)
;

CREATE INDEX HDGROUP_datatypeid_idx ON HYBRIDIZATION_DATA_GROUP(data_type_id) ;


ALTER TABLE HYBRIDIZATION_REF ADD CONSTRAINT FK_HYBREF_EXPERIMENT FOREIGN KEY (experiment_id) REFERENCES EXPERIMENT(experiment_id);
CREATE INDEX HYBREF_experimentid_idx ON HYBRIDIZATION_REF(experiment_id) ;

ALTER TABLE HYBRIDIZATION_VALUE ADD CONSTRAINT FK_HYBValue_HDGroup FOREIGN KEY (hybridization_data_group_id) REFERENCES HYBRIDIZATION_DATA_GROUP(hybridization_data_group_id);
ALTER TABLE HYBRIDIZATION_VALUE ADD CONSTRAINT FK_HYBValue_COMPELE FOREIGN KEY (composite_element_id) REFERENCES COMPOSITE_ELEMENT(composite_element_id);
ALTER TABLE HYBRIDIZATION_VALUE ADD CONSTRAINT FK_HYBValue_HYBREF FOREIGN KEY (hybridization_ref_id) REFERENCES HYBRIDIZATION_REF(hybridization_ref_id);

ALTER TABLE PLATFORM_TYPE ADD CONSTRAINT FK_PLATFORM_TYPE_DATA_TYPE 
	FOREIGN KEY (data_type_id) REFERENCES DATA_TYPE (data_type_id)
;

CREATE INDEX  PLATFORM_TYPE_datatypeid_idx ON PLATFORM_TYPE  (data_type_id) ;

ALTER TABLE PLATFORM_TYPE ADD CONSTRAINT FK_PLATFORM_TYPE_PLATFORM 
	FOREIGN KEY (platform_id) REFERENCES PLATFORM (platform_id)
;

CREATE INDEX  PLATFORM_TYPE_platformid_idx ON PLATFORM_TYPE(platform_id) ;

ALTER TABLE cna_value ADD CONSTRAINT fk_cna_value_hybref FOREIGN KEY (hybridization_ref_id) REFERENCES hybridization_ref;
ALTER TABLE cna_value ADD CONSTRAINT fk_cna_value_dataset FOREIGN KEY (data_set_id) REFERENCES datA_set;
CREATE INDEX cna_value_dataset_idx ON cna_value(data_set_id);





-- ------------------
-- Starting queries:
-- ------------------

insert into disease (abbreviation) values ('GBM');
insert into center (domain_name) values ('broad.mit.edu');
insert into center (domain_name) values ('jhu-usc.edu');
insert into platform (name) values ('Genome_Wide_SNP_6');
insert into platform (name) values ('IlluminaDNAMethylation_OMA002_CPI');
insert into platform (name) values ('IlluminaDNAMethylation_OMA003_CPI');
insert into data_type (name) values ('SNP');
insert into data_type (name) values ('DNA Methylation');
insert into center_disease values (1,1);
insert into center_disease values (2,1);
insert into center_platform (center_id, platform_id, center_type) values (1,1,'CGCC');
insert into center_platform (center_id, platform_id, center_type) values (2,2,'CGCC');
insert into center_platform (center_id, platform_id, center_type) values (2,3,'CGCC');
insert into platform_type values (1,1);
insert into platform_type values (2,2);
insert into platform_type values (3,2);
insert into platform (name) values ('HT_HG-U133A');
insert into data_type (name) values ('Expression-Genes'); 
insert into center_platform (center_id, platform_id, center_type) values (1,4,'CGCC');
insert into platform_type values (4,3);

insert into center (domain_name) values ('hms.harvard.edu');
insert into platform (name) values ('HG-CGH-244A');
insert into data_type (name) values ('Copy Number Results'); 
insert into center_platform (center_id, platform_id, center_type) values (3,5,'CGCC');
insert into platform_type values (5,4);

insert into center (domain_name) values ('lbl.gov');
insert into platform (name) values ('HuEx-1_0-st-v2');
insert into data_type (name) values ('Expression-Exon');
insert into center_platform (center_id, platform_id, center_type) values (4,6,'CGCC');
insert into platform_type values (6,5);

insert into center (domain_name) values ('mskcc.org');
insert into center_platform (center_id, platform_id, center_type) values (5,5,'CGCC');

insert into center (domain_name) values ('stanford.edu');
insert into platform (name) values ('HumanHap550');
insert into center_platform (center_id, platform_id, center_type) values (6,7,'CGCC');
insert into platform_type values (7,1);

insert into center (domain_name) values ('unc.edu');
insert into platform (name) values ('AgilentG4502A_07_1');
insert into platform (name) values ('AgilentG4502A_07_2');
insert into center_platform (center_id, platform_id, center_type) values (7,8, 'CGCC');  
insert into center_platform (center_id, platform_id, center_type) values (7,9, 'CGCC');
insert into platform_type values(8,3);
insert into platform_type values(9,3);

commit;

-- ----------------------
-- FUNCTIONS FOR LOADING:
-- ----------------------


create or replace function get_comp_ele_id(whatever varchar2) return integer is
    idid  integer;
  begin
    select COMPOSITE_ELE_composite_el_SEQ.NEXTVAL into idid from dual;
    return idid;
  end get_comp_ele_id;
/


-- ---------------
-- TEMP HACK
-- ---------------
-- CREATE TABLE biospecimen_breakdown (
-- biospecimen_id number(38) NOT NULL,
-- barcode varchar2(255) NOT NULL,
-- built_barcode varchar2(255) NOT NULL,
-- biospecimen varchar2(255) NOT NULL,
-- analyte varchar2(255) NOT NULL, 
-- sample varchar2(255) NOT NULL, 
-- specific_patient varchar2(255) NOT NULL, 
-- project  varchar2(255) NOT NULL, 
-- collection_center varchar2(255) NOT NULL,
-- patient varchar2(255) NOT NULL,
-- sample_type varchar2(255) NOT NULL,
-- sample_sequence varchar2(255) NOT NULL,
-- portion_sequence varchar2(255) NOT NULL,
-- portion_analyte varchar2(255) NOT NULL,
-- plate_id varchar2(255) NOT NULL,
-- bcr_center_id varchar2(255) NOT NULL
-- );

-- @ "C:\data_copy\biospecimen_breakdown_20080303.txt"

-- commit;


--for dbunit testing, drop the triggers

DROP TRIGGER SET_CENTER_center_id;
DROP TRIGGER SET_COMPOSITE_ELE_composite_el;
DROP TRIGGER SET_COMPOSITE_SET_composite_el;
DROP TRIGGER SET_DATA_SET_data_set_id;
DROP TRIGGER SET_DATA_TYPE_data_type_id;
DROP TRIGGER SET_DISEASE_disease_id;
DROP TRIGGER SET_EXPERIMENT_experiment_id;
DROP TRIGGER SET_HYBREF_hybridization;
DROP TRIGGER SET_HDGroup_hybridization;
DROP TRIGGER SET_PLATFORM_platform_id;
